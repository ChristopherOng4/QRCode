import java.util.Random;

public class QRCode {
private int [][] grid;
//could insert a default grid variable 
	
	//Returns a 1D int array with size of dim squared 
	//Filled with random 0 and 1 generated by javautilRandom object 
	public int [] createPattern (int dim, int seed) {
		
		Random rand = new Random(seed);
		int [] Array1D = new int [dim*dim];
		for (int i = 0; i < Array1D.length; i++) {
			Array1D[i] = rand.nextInt(0,1);
			}
		return Array1D;
		}
	
	//Takes dim dimensions and creates 2D array with size of dim by dim 
	//Grid filled row by row from pattern provided by 1D array pattern passed in 
	public void setGrid (int dim, int [] pattern) {
		grid = new int [dim][dim]; 
		int count = 0;
		//grid row
		for (int i = 0; i < dim; i++) {
			//grid column 
			for (int k = 0; k < dim; k++) {
				grid[i][k] = pattern [count];
				count++;
			}
		}
		
	}
	
	//Returns representation of grid member
	public int [][] getGrid() {
		return grid;
	}
	
	//Overwrites existing grid with Finder pattern described here 
	//Places finder in each of upper left, upper right, and lower left corners of grid
	//Returns null if grid is null 
	public void setFinder(int xPos, int yPos) {
		//15x15
		for (int i = xPos; i < xPos + 15; i++) {
			for (int j = yPos; j < yPos + 15; j++) {
				grid[i][j] = 1;
			}
		}
		//11x11
		for (int i = xPos + 2; i < xPos + 13; i++) {
			for (int j = yPos + 2; j < yPos +13; j++) {
				grid[i][j] = 0;
			}
		}
		//7x7
		for (int i = xPos + 4; i < xPos + 11; i++) {
			for (int j = yPos + 4; j < yPos + 11; j++) {
				grid[i][j] = 2;
			}
		}
		//3x3
		for (int i = xPos + 6; i < xPos + 11; i++) {
			for (int j = yPos + 6; j < yPos + 9; j++) {
				grid[i][j] = 3; 
		}
	}
}
	
	//Outputs class member grid as 2D grid with no spaces between values in a row 
	public void print() {
		for (int i = 0; i < grid.length; i++ ) { 
			for (int k = 0; k < grid[0].length; k++) {
				System.out.print(grid[i][k]);
			}
			System.out.println();
		}
		 
	}
	
	//Outputs 1D pattern passed as a parameter as 2D grid with no spaces between values in a row 
	public void print(int [] pattern) {
		int size = (int) Math.sqrt(pattern.length);
		for (int i = 0; i < pattern.length; i++) {
			if (((pattern.length)%size == 0) && i!= 0) {
				System.out.println();
			}
			System.out.print(pattern[i]);
		}
	}
	
	//Outputs 2D matrix passed as a parameter row by row with no spaces between values in a row 
	public void print(int [][] matrix) {
		for (int i = 0; i < matrix.length; i++) {
			for (int k = 0; k < matrix.length; k++) {
				System.out.print(grid[i][k]);
			}
		System.out.println();
		}
	}
	public static void main(String[] args) {
		QRCode qr = new QRCode();
		int dim;
		int sum;
		int DEFAULT_DIMENSION = 30;
		int DEFAULT_SEED = 160;
		int [] pattern;
		int [][] matrix;
		
		//custom if have 2 args 
		
		//default parameter 
		
	}
}
